datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Faculty {
  id    Int     @id @default(autoincrement())
  name  String
  Major Major[]
  Batch Batch[]
}

model Batch {
  id        Int     @id @default(autoincrement())
  name      String
  Major     Major   @relation(fields: [majorId], references: [id])
  majorId   Int
  Faculty   Faculty @relation(fields: [facultyId], references: [id])
  facultyId Int

  Student Student[]
  Memory  Memory[]
}

model Major {
  id         Int     @id @default(autoincrement())
  name       String
  faculty_id Int
  Faculty    Faculty @relation(fields: [faculty_id], references: [id])
  Batch      Batch[]
}

model Student {
  id       Int   @id @default(autoincrement())
  userId   Int   @unique
  User     User  @relation(fields: [userId], references: [id])
  batch_id Int
  Batch    Batch @relation(fields: [batch_id], references: [id])
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  profile_picture String?
  first_name      String
  last_name       String
  details         String?
  contacts        String?
  Student         Student?

  conversations Conversation[]

  sentMessages Message[]

  Events       Event[]
  Participants Participant[]
  Comments     Comment[]
  Memory       Memory[]
}

model Memory {
  id          Int           @id @default(autoincrement())
  title       String
  image_url   String
  description String?
  date_posted DateTime      @default(now())
  likes       Int           @default(0)
  batch_id    Int
  user_id     Int
  Batch       Batch         @relation(fields: [batch_id], references: [id])
  User        User          @relation(fields: [user_id], references: [id])
  MemoryImage MemoryImage[]
  Comments    Comment[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  start_date  DateTime @default(now())
  userId      Int
  likes       Int      @default(0)
  image_url   String?

  User         User          @relation(fields: [userId], references: [id])
  Participants Participant[]
  Comments     Comment[]
}

model MemoryImage {
  id        Int    @id @default(autoincrement())
  memoryId  Int
  image_url String
  Memory    Memory @relation(fields: [memoryId], references: [id])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  date_posted DateTime @default(now())
  userId      Int
  User        User     @relation(fields: [userId], references: [id])
  memoryId    Int?
  Memory      Memory?  @relation(fields: [memoryId], references: [id])
  eventId     Int?
  Event       Event?   @relation(fields: [eventId], references: [id])
}

model Participant {
  id      Int   @id @default(autoincrement())
  userId  Int
  eventId Int
  User    User  @relation(fields: [userId], references: [id])
  Event   Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId]) // Ensure a user can join an event only once
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String?

  messages Message[]
  users    User[]
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String

  senderId Int
  sender   User @relation(fields: [senderId], references: [id])

  conversationId String
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
}
